// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SmartMentorLive.Infrastructure.Persistence.Context;


#nullable disable

namespace SmartMentorLive.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250828193825_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MentorProfileSkill", b =>
                {
                    b.Property<int>("MentorsId")
                        .HasColumnType("int");

                    b.Property<int>("SkillsId")
                        .HasColumnType("int");

                    b.HasKey("MentorsId", "SkillsId");

                    b.HasIndex("SkillsId");

                    b.ToTable("MentorProfileSkill");
                });

            modelBuilder.Entity("SmartMentorLive.Domain.Entities.Industries.Industry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Industries");
                });

            modelBuilder.Entity("SmartMentorLive.Domain.Entities.Industries.MentorIndustry", b =>
                {
                    b.Property<int>("MentorProfileId")
                        .HasColumnType("int");

                    b.Property<int>("IndustryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("MentorProfileId", "IndustryId");

                    b.HasIndex("IndustryId");

                    b.ToTable("MentorIndustries");
                });

            modelBuilder.Entity("SmartMentorLive.Domain.Entities.Notifications.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NotificationType")
                        .HasColumnType("int");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<bool>("SendEmail")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("SmartMentorLive.Domain.Entities.Sessions.GroupSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRecurring")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MeetingUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MentorProfileId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Thumbnail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MentorProfileId");

                    b.ToTable("GroupSessions");
                });

            modelBuilder.Entity("SmartMentorLive.Domain.Entities.Sessions.GroupSessionEnrollment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EnrollmentStatus")
                        .HasColumnType("int");

                    b.Property<int>("GroupSessionId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StudentProfileId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GroupSessionId");

                    b.HasIndex("StudentProfileId");

                    b.ToTable("GetGroupSessionEnrollments");
                });

            modelBuilder.Entity("SmartMentorLive.Domain.Entities.Sessions.MentorshipSessionBooking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BookingTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CancelledAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CancelledBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MeetingUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MentorAvailabilityId")
                        .HasColumnType("int");

                    b.Property<int>("MentorAvalabilityId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RescheduleTo")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("StudentProfileId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MentorAvalabilityId");

                    b.HasIndex("StudentProfileId");

                    b.ToTable("MentorshipSessionBookings");
                });

            modelBuilder.Entity("SmartMentorLive.Domain.Entities.Sessions.PlanRecordedVideo", b =>
                {
                    b.Property<int>("SubscriptionPlanId")
                        .HasColumnType("int");

                    b.Property<int>("RecordedVideoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("SubscriptionPlanId", "RecordedVideoId");

                    b.HasIndex("RecordedVideoId");

                    b.ToTable("PlanRecordedVideo");
                });

            modelBuilder.Entity("SmartMentorLive.Domain.Entities.Sessions.RecordedVideo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Thumbnail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VideolLevel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RecordedVideos");
                });

            modelBuilder.Entity("SmartMentorLive.Domain.Entities.Sessions.SessionHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GroupSessionId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MentorProfileId")
                        .HasColumnType("int");

                    b.Property<int?>("MentorshipSessionId")
                        .HasColumnType("int");

                    b.Property<int>("StudentProfileId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GroupSessionId");

                    b.HasIndex("MentorProfileId");

                    b.HasIndex("MentorshipSessionId");

                    b.HasIndex("StudentProfileId");

                    b.ToTable("SessionHistory");
                });

            modelBuilder.Entity("SmartMentorLive.Domain.Entities.Sessions.SessionRating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Feedback")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GroupSessionId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MentorshipSessionBookingId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int>("StudentProfileId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GroupSessionId");

                    b.HasIndex("MentorshipSessionBookingId");

                    b.HasIndex("StudentProfileId", "GroupSessionId")
                        .IsUnique()
                        .HasFilter("[GroupSessionId]  IS NOT NULL");

                    b.HasIndex("StudentProfileId", "MentorshipSessionBookingId")
                        .IsUnique()
                        .HasFilter("[MentorshipSessionBookingId] IS NOT NULL");

                    b.ToTable("SessionRating");
                });

            modelBuilder.Entity("SmartMentorLive.Domain.Entities.Subscriptions.MentorSubscriptionPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MentorProfileId")
                        .HasColumnType("int");

                    b.Property<int>("SubscriptionPlanId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MentorProfileId");

                    b.HasIndex("SubscriptionPlanId");

                    b.ToTable("MentorSubscriptionPlans");
                });

            modelBuilder.Entity("SmartMentorLive.Domain.Entities.Subscriptions.PaymentTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PaidAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("StudentProfileId")
                        .HasColumnType("int");

                    b.Property<int>("StudentSubscriptionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentProfileId");

                    b.HasIndex("StudentSubscriptionId");

                    b.ToTable("PaymentTransaction");
                });

            modelBuilder.Entity("SmartMentorLive.Domain.Entities.Subscriptions.StudentSubscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("StudentProfileId")
                        .HasColumnType("int");

                    b.Property<int>("SubscriptionPlanId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentProfileId");

                    b.HasIndex("SubscriptionPlanId");

                    b.ToTable("StudentSubscriptions");
                });

            modelBuilder.Entity("SmartMentorLive.Domain.Entities.Subscriptions.SubscriptionFeature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUnlimited")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("SubscriptionPlanId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SubscriptionPlanId");

                    b.ToTable("SubscriptionFeatures");
                });

            modelBuilder.Entity("SmartMentorLive.Domain.Entities.Subscriptions.SubscriptionPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DurationInDays")
                        .HasColumnType("int");

                    b.Property<int>("IndustryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("IndustryId");

                    b.ToTable("SubscriptionPlans");
                });

            modelBuilder.Entity("SmartMentorLive.Domain.Entities.Users.MentorAvalability", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRecurring")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MentorProfileId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MentorProfileId");

                    b.ToTable("MentorAvalabilities");
                });

            modelBuilder.Entity("SmartMentorLive.Domain.Entities.Users.MentorEarning", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Commission")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EarningPayoutId")
                        .HasColumnType("int");

                    b.Property<decimal>("GrossAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MentorProfileId")
                        .HasColumnType("int");

                    b.Property<decimal>("NetAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PaymentTransactionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EarningPayoutId");

                    b.HasIndex("MentorProfileId");

                    b.HasIndex("PaymentTransactionId")
                        .IsUnique();

                    b.ToTable("MentorEarnings");
                });

            modelBuilder.Entity("SmartMentorLive.Domain.Entities.Users.MentorProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ApprovalStatus")
                        .HasColumnType("int");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LinkedInUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PortfolioUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RejectionReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResumeUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("YearsOfExperience")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("MentorProfiles");
                });

            modelBuilder.Entity("SmartMentorLive.Domain.Entities.Users.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("SmartMentorLive.Domain.Entities.Users.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("SmartMentorLive.Domain.Entities.Users.StudentProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("StudentProfiles");
                });

            modelBuilder.Entity("SmartMentorLive.Domain.Entities.Users.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SmartMentorLive.Domain.Entities.admin.AdminAuditLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AdminId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSuccess")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("AdminAuditLog");
                });

            modelBuilder.Entity("SmartMentorLive.Domain.Entities.admin.EarningPayout", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MentorProfileId")
                        .HasColumnType("int");

                    b.Property<decimal>("NetAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("PaidAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalCommission")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalGross")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("MentorProfileId");

                    b.ToTable("EarningPayouts");
                });

            modelBuilder.Entity("MentorProfileSkill", b =>
                {
                    b.HasOne("SmartMentorLive.Domain.Entities.Users.MentorProfile", null)
                        .WithMany()
                        .HasForeignKey("MentorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartMentorLive.Domain.Entities.Users.Skill", null)
                        .WithMany()
                        .HasForeignKey("SkillsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartMentorLive.Domain.Entities.Industries.MentorIndustry", b =>
                {
                    b.HasOne("SmartMentorLive.Domain.Entities.Industries.Industry", "Industry")
                        .WithMany("MentorIndustries")
                        .HasForeignKey("IndustryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartMentorLive.Domain.Entities.Users.MentorProfile", "MentorProfile")
                        .WithMany("MentorIndustries")
                        .HasForeignKey("MentorProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Industry");

                    b.Navigation("MentorProfile");
                });

            modelBuilder.Entity("SmartMentorLive.Domain.Entities.Notifications.Notification", b =>
                {
                    b.HasOne("SmartMentorLive.Domain.Entities.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartMentorLive.Domain.Entities.Sessions.GroupSession", b =>
                {
                    b.HasOne("SmartMentorLive.Domain.Entities.Users.MentorProfile", "MentorProfile")
                        .WithMany()
                        .HasForeignKey("MentorProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MentorProfile");
                });

            modelBuilder.Entity("SmartMentorLive.Domain.Entities.Sessions.GroupSessionEnrollment", b =>
                {
                    b.HasOne("SmartMentorLive.Domain.Entities.Sessions.GroupSession", "GroupSession")
                        .WithMany("Enrollments")
                        .HasForeignKey("GroupSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartMentorLive.Domain.Entities.Users.StudentProfile", "StudentProfile")
                        .WithMany()
                        .HasForeignKey("StudentProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("GroupSession");

                    b.Navigation("StudentProfile");
                });

            modelBuilder.Entity("SmartMentorLive.Domain.Entities.Sessions.MentorshipSessionBooking", b =>
                {
                    b.HasOne("SmartMentorLive.Domain.Entities.Users.MentorAvalability", "MentorAvalability")
                        .WithMany("MentorshipSessionBookings")
                        .HasForeignKey("MentorAvalabilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartMentorLive.Domain.Entities.Users.StudentProfile", "StudentProfile")
                        .WithMany()
                        .HasForeignKey("StudentProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MentorAvalability");

                    b.Navigation("StudentProfile");
                });

            modelBuilder.Entity("SmartMentorLive.Domain.Entities.Sessions.PlanRecordedVideo", b =>
                {
                    b.HasOne("SmartMentorLive.Domain.Entities.Sessions.RecordedVideo", "RecordedVideo")
                        .WithMany("PlanRecordedVideos")
                        .HasForeignKey("RecordedVideoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartMentorLive.Domain.Entities.Subscriptions.SubscriptionPlan", "SubscriptionPlan")
                        .WithMany("PlanRecordedVideos")
                        .HasForeignKey("SubscriptionPlanId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("RecordedVideo");

                    b.Navigation("SubscriptionPlan");
                });

            modelBuilder.Entity("SmartMentorLive.Domain.Entities.Sessions.SessionHistory", b =>
                {
                    b.HasOne("SmartMentorLive.Domain.Entities.Sessions.GroupSession", "GroupSession")
                        .WithMany()
                        .HasForeignKey("GroupSessionId");

                    b.HasOne("SmartMentorLive.Domain.Entities.Users.MentorProfile", "Mentor")
                        .WithMany()
                        .HasForeignKey("MentorProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartMentorLive.Domain.Entities.Sessions.MentorshipSessionBooking", "MentorshipSession")
                        .WithMany()
                        .HasForeignKey("MentorshipSessionId");

                    b.HasOne("SmartMentorLive.Domain.Entities.Users.StudentProfile", "Student")
                        .WithMany()
                        .HasForeignKey("StudentProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GroupSession");

                    b.Navigation("Mentor");

                    b.Navigation("MentorshipSession");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SmartMentorLive.Domain.Entities.Sessions.SessionRating", b =>
                {
                    b.HasOne("SmartMentorLive.Domain.Entities.Sessions.GroupSession", "GroupSession")
                        .WithMany()
                        .HasForeignKey("GroupSessionId");

                    b.HasOne("SmartMentorLive.Domain.Entities.Sessions.MentorshipSessionBooking", "MentorshipSession")
                        .WithMany()
                        .HasForeignKey("MentorshipSessionBookingId");

                    b.HasOne("SmartMentorLive.Domain.Entities.Users.StudentProfile", "StudentProfile")
                        .WithMany()
                        .HasForeignKey("StudentProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GroupSession");

                    b.Navigation("MentorshipSession");

                    b.Navigation("StudentProfile");
                });

            modelBuilder.Entity("SmartMentorLive.Domain.Entities.Subscriptions.MentorSubscriptionPlan", b =>
                {
                    b.HasOne("SmartMentorLive.Domain.Entities.Users.MentorProfile", "MentorProfile")
                        .WithMany("MentorSubscriptionPlans")
                        .HasForeignKey("MentorProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartMentorLive.Domain.Entities.Subscriptions.SubscriptionPlan", "SubscriptionPlan")
                        .WithMany("MentorSubscriptionPlans")
                        .HasForeignKey("SubscriptionPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MentorProfile");

                    b.Navigation("SubscriptionPlan");
                });

            modelBuilder.Entity("SmartMentorLive.Domain.Entities.Subscriptions.PaymentTransaction", b =>
                {
                    b.HasOne("SmartMentorLive.Domain.Entities.Users.StudentProfile", "StudentProfile")
                        .WithMany("PaymentTransactions")
                        .HasForeignKey("StudentProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartMentorLive.Domain.Entities.Subscriptions.StudentSubscription", "StudentSubscription")
                        .WithMany("PaymentTransactions")
                        .HasForeignKey("StudentSubscriptionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("StudentProfile");

                    b.Navigation("StudentSubscription");
                });

            modelBuilder.Entity("SmartMentorLive.Domain.Entities.Subscriptions.StudentSubscription", b =>
                {
                    b.HasOne("SmartMentorLive.Domain.Entities.Users.StudentProfile", "StudentProfile")
                        .WithMany("StudentSubscriptions")
                        .HasForeignKey("StudentProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartMentorLive.Domain.Entities.Subscriptions.SubscriptionPlan", "SubscriptionPlan")
                        .WithMany("StudentSubscriptions")
                        .HasForeignKey("SubscriptionPlanId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("StudentProfile");

                    b.Navigation("SubscriptionPlan");
                });

            modelBuilder.Entity("SmartMentorLive.Domain.Entities.Subscriptions.SubscriptionFeature", b =>
                {
                    b.HasOne("SmartMentorLive.Domain.Entities.Subscriptions.SubscriptionPlan", "SubscriptionPlan")
                        .WithMany("Features")
                        .HasForeignKey("SubscriptionPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubscriptionPlan");
                });

            modelBuilder.Entity("SmartMentorLive.Domain.Entities.Subscriptions.SubscriptionPlan", b =>
                {
                    b.HasOne("SmartMentorLive.Domain.Entities.Industries.Industry", "Industry")
                        .WithMany("SubscriptionPlans")
                        .HasForeignKey("IndustryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Industry");
                });

            modelBuilder.Entity("SmartMentorLive.Domain.Entities.Users.MentorAvalability", b =>
                {
                    b.HasOne("SmartMentorLive.Domain.Entities.Users.MentorProfile", "MentorProfile")
                        .WithMany()
                        .HasForeignKey("MentorProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MentorProfile");
                });

            modelBuilder.Entity("SmartMentorLive.Domain.Entities.Users.MentorEarning", b =>
                {
                    b.HasOne("SmartMentorLive.Domain.Entities.admin.EarningPayout", "EarningPayout")
                        .WithMany("MentorEarnings")
                        .HasForeignKey("EarningPayoutId");

                    b.HasOne("SmartMentorLive.Domain.Entities.Users.MentorProfile", "MentorProfile")
                        .WithMany()
                        .HasForeignKey("MentorProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartMentorLive.Domain.Entities.Subscriptions.PaymentTransaction", "PaymentTransaction")
                        .WithOne("MentorEarning")
                        .HasForeignKey("SmartMentorLive.Domain.Entities.Users.MentorEarning", "PaymentTransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EarningPayout");

                    b.Navigation("MentorProfile");

                    b.Navigation("PaymentTransaction");
                });

            modelBuilder.Entity("SmartMentorLive.Domain.Entities.Users.MentorProfile", b =>
                {
                    b.HasOne("SmartMentorLive.Domain.Entities.Users.User", "User")
                        .WithOne("MentorProfile")
                        .HasForeignKey("SmartMentorLive.Domain.Entities.Users.MentorProfile", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartMentorLive.Domain.Entities.Users.StudentProfile", b =>
                {
                    b.HasOne("SmartMentorLive.Domain.Entities.Users.User", "User")
                        .WithOne("StudentProfile")
                        .HasForeignKey("SmartMentorLive.Domain.Entities.Users.StudentProfile", "UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartMentorLive.Domain.Entities.Users.User", b =>
                {
                    b.HasOne("SmartMentorLive.Domain.Entities.Users.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("SmartMentorLive.Domain.Entities.admin.EarningPayout", b =>
                {
                    b.HasOne("SmartMentorLive.Domain.Entities.Users.MentorProfile", "MentorProfile")
                        .WithMany("EarningPayouts")
                        .HasForeignKey("MentorProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MentorProfile");
                });

            modelBuilder.Entity("SmartMentorLive.Domain.Entities.Industries.Industry", b =>
                {
                    b.Navigation("MentorIndustries");

                    b.Navigation("SubscriptionPlans");
                });

            modelBuilder.Entity("SmartMentorLive.Domain.Entities.Sessions.GroupSession", b =>
                {
                    b.Navigation("Enrollments");
                });

            modelBuilder.Entity("SmartMentorLive.Domain.Entities.Sessions.RecordedVideo", b =>
                {
                    b.Navigation("PlanRecordedVideos");
                });

            modelBuilder.Entity("SmartMentorLive.Domain.Entities.Subscriptions.PaymentTransaction", b =>
                {
                    b.Navigation("MentorEarning")
                        .IsRequired();
                });

            modelBuilder.Entity("SmartMentorLive.Domain.Entities.Subscriptions.StudentSubscription", b =>
                {
                    b.Navigation("PaymentTransactions");
                });

            modelBuilder.Entity("SmartMentorLive.Domain.Entities.Subscriptions.SubscriptionPlan", b =>
                {
                    b.Navigation("Features");

                    b.Navigation("MentorSubscriptionPlans");

                    b.Navigation("PlanRecordedVideos");

                    b.Navigation("StudentSubscriptions");
                });

            modelBuilder.Entity("SmartMentorLive.Domain.Entities.Users.MentorAvalability", b =>
                {
                    b.Navigation("MentorshipSessionBookings");
                });

            modelBuilder.Entity("SmartMentorLive.Domain.Entities.Users.MentorProfile", b =>
                {
                    b.Navigation("EarningPayouts");

                    b.Navigation("MentorIndustries");

                    b.Navigation("MentorSubscriptionPlans");
                });

            modelBuilder.Entity("SmartMentorLive.Domain.Entities.Users.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("SmartMentorLive.Domain.Entities.Users.StudentProfile", b =>
                {
                    b.Navigation("PaymentTransactions");

                    b.Navigation("StudentSubscriptions");
                });

            modelBuilder.Entity("SmartMentorLive.Domain.Entities.Users.User", b =>
                {
                    b.Navigation("MentorProfile");

                    b.Navigation("StudentProfile");
                });

            modelBuilder.Entity("SmartMentorLive.Domain.Entities.admin.EarningPayout", b =>
                {
                    b.Navigation("MentorEarnings");
                });
#pragma warning restore 612, 618
        }
    }
}
